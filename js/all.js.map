{"version":3,"sources":["all.js"],"names":["app","Vue","el","data","allData","selectCountry","loading","updateTime","detailData","methods","vm","this","method","url","response","getTime","initData","catch","AQI_API","statusColor","status","className","console","Date","month","now","getMonth","concat","getFullYear","getDate","getHours","getMinutes","showDetail","item","Object","assign","country","arguments","length","undefined","find","County","computed","forEach","set","add","_toConsumableArray","filter","getAQI"],"mappings":"8dAAA,IAAMA,IAAM,IAAIC,IAAI,CAClBC,GAAI,OACJC,KAAM,CACJC,QAAS,GACTC,cAAe,GACfC,SAAS,EACTC,WAAY,GACZC,WAAY,IAEdC,QAAS,CATLT,OASK,WARL,IADcU,EAAAC,KAGhBP,EAAAA,cADI,GAEJC,EAAAA,SAAe,EACfC,MAAO,CAAEM,OAHL,MAAAC,IAAA,oKAIJN,KAAU,SAAAO,GACVN,EAAAA,QAAYM,EAAAX,KAPIO,EAAAK,UASXL,EAAEM,WAAAN,EAAAJ,SAAA,IAGLW,MAAMC,SAAAA,GACHb,EAAAA,UACAC,EAAAA,SAAH,KACMa,YAND,SAOGC,GACJV,IAAEW,EAAWP,GACbJ,OAAGK,GACHL,IAAGM,KACDK,EAAW,cAEdJ,MACCP,IAAGK,KACDM,EAAW,kBACbC,MAVJ,IAAA,WANKD,EAAA,mBAmBPF,MACE,IAAIE,WAYAA,EAAY,mBAXhB,MACE,IAAK,QACHA,EAAY,wBACZ,MAaF,IAAK,KAZLA,EAAA,cAIEA,OAAAA,GAgBNN,QA7CO,WA+BH,IACEM,EAAAA,IAAYE,KACZC,EAAAC,EAAAC,WAAA,EAgBAF,EAAQ,KAfVA,EAAK,IAAAG,OAALH,IAHKb,KAKHJ,WAAA,GAAAoB,OAAAF,EAAAG,cAAA,KAAAD,OAAAH,EAAA,KAAAG,OAAAF,EAAAI,UAAA,KAAAF,OAAAF,EAAAK,WAAA,KAAAH,OAAAF,EAAAM,eACFC,WArCG,SAqCEC,GACHZ,KACAb,WAAA0B,OAAAC,OAAA,GAAAF,IACFjB,SAxCG,WAwCH,IAAAoB,EAAA,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,MACE1B,KApBJH,WAoBIG,KApBJP,QAAAoC,KAAA,SAAAP,GAAA,OAAAA,EAAAQ,SAAAL,MAuBDM,SA5CM,CA6CP3B,cA7CO,WA8CL,IACMU,EAAM,IAAIF,IAIf,OALUZ,KAEXP,QAASuC,QAAOjB,SAAAA,GAoBdkB,EAAIC,IAAIZ,EAAKQ,UAlBRK,mBAAOtB,IAEdd,kBApDK,WAAA,IAAAA,EAAAC,KAsDPqB,OAAAA,EAAAA,eACEtB,EAAMA,SAANA,EAAAL,eACGG,EAAAA,QAAa0B,OAAOC,SAAAA,GAAO,OAAIF,EAAlCQ,SAAA/B,EAAAL,iBAxDKK,EAAAN,QAAA2C,OAAA,SAAAd,GA0DmB,OAAAA,MAExBvB,QArEc,WAqE0BuB,KAAxBe","file":"all.js","sourcesContent":["const app = new Vue({\n  el: '#app',\n  data: {\n    allData: [],\n    selectCountry: '',\n    loading: false,\n    updateTime: '',\n    detailData: {},\n  },\n  methods: {\n    getAQI() {\n      const vm = this;\n      const AQI_API = 'https://script.google.com/macros/s/AKfycbwH2Fb3JOsKQETPgXc8xrlIXIYQ26ldyw70dJD5AQXqhwBU7Asp/exec?url=http://opendata.epa.gov.tw/webapi/Data/REWIQA/?format=json';\n      vm.selectCountry = '';\n      vm.loading = true;\n      axios({ method: 'get', url: AQI_API })\n        .then((response) => {\n          vm.allData = response.data;\n          vm.getTime();\n          vm.initData();\n          vm.loading = false;\n        })\n        .catch((error) => {\n          vm.getTime();\n          vm.loading = false;\n          console.log(`資料取得失敗:${error}`);\n        });\n    },\n    statusColor(status) {\n      let className = '';\n      switch (status) {\n        case '良好':\n          className = 'status-good';\n          break;\n        case '普通':\n          className = 'status-ordinary';\n          break;\n        case '對敏感族群不健康':\n          className = 'status-sensitive';\n          break;\n        case '對所有族群不健康':\n          className = 'status-unhealthy';\n          break;\n        case '非常不健康':\n          className = 'status-unhealthy-hard';\n          break;\n        case '危害':\n          className = 'status-harm';\n          break;\n        default:\n          break;\n      }\n      return className;\n    },\n    getTime() {\n      const vm = this;\n      const now = new Date();\n      let month = now.getMonth() + 1;\n      if (month < 10) {\n        month = `0${month}`;\n      }\n      vm.updateTime = `${now.getFullYear()}-${month}-${now.getDate()} ${now.getHours()}:${now.getMinutes()}`;\n    },\n    showDetail(item) {\n      const vm = this;\n      vm.detailData = Object.assign({}, item);\n    },\n    initData(country = '臺北市') {\n      const vm = this;\n      vm.detailData = vm.allData.find(item => item.County === country);\n    },\n  },\n  computed: {\n    filterCountry() {\n      const vm = this;\n      const set = new Set();\n      vm.allData.forEach((item) => {\n        set.add(item.County);\n      });\n      const countryArray = [...set];\n      return countryArray;\n    },\n    filterCountryData() {\n      const vm = this;\n      if (vm.selectCountry) {\n        vm.initData(vm.selectCountry);\n        return vm.allData.filter(item => item.County === vm.selectCountry);\n      }\n      return vm.allData.filter(item => item);\n    },\n  },\n  created() {\n    const vm = this;\n    vm.getAQI();\n  },\n});\n"]}